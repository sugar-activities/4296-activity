#!/usr/bin/env python
# Copyright (C) 2007, One Laptop Per Child
# Copyright (C) 2008, Vincent Povirk for CodeWeavers
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

# This sucks. To get the object chooser to work outside the main activity
#  process, I had to cpoy the class from the sugar library and remove parts of
#  it, apparently because I'm not getting some glib magic right.
#
# Hopefully the API won't change drastically.

import os
import traceback

import dbus
import dbus.mainloop.glib

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

import gobject

J_DBUS_SERVICE = 'org.laptop.Journal'
J_DBUS_INTERFACE = 'org.laptop.Journal'
J_DBUS_PATH = '/org/laptop/Journal'

RESPONSE_NONE = -1
RESPONSE_CANCEL = -6
RESPONSE_ACCEPT = -3

class ObjectChooser(object):
    def __init__(self, parent=None):
        if parent is None:
            parent_xid = 0
        elif hasattr(parent, 'window') and hasattr(parent.window, 'xid'):
            parent_xid = parent.window.xid
        else:
            parent_xid = parent

        self._parent_xid = parent_xid
        self._object_id = None
        self._bus = None
        self._chooser_id = None
        self._response_code = RESPONSE_NONE
        
    def run(self):
        self._object_id = None

        self._main_loop = gobject.MainLoop()

        self._bus = dbus.SessionBus()
        self._bus.add_signal_receiver(
                self.__name_owner_changed_cb,
                signal_name="NameOwnerChanged",
                dbus_interface="org.freedesktop.DBus",
                arg0=J_DBUS_SERVICE)

        obj = self._bus.get_object(J_DBUS_SERVICE, J_DBUS_PATH)
        journal = dbus.Interface(obj, J_DBUS_INTERFACE)
        journal.connect_to_signal('ObjectChooserResponse',
                                  self.__chooser_response_cb)
        journal.connect_to_signal('ObjectChooserCancelled',
                                  self.__chooser_cancelled_cb)
        self._chooser_id = journal.ChooseObject(self._parent_xid)

        self._main_loop.run()

        self._main_loop = None

        return self._response_code

    def get_selected_object(self):
        if self._object_id is None:
            return None
        else:
            from sugar.datastore import datastore
            return datastore.get(self._object_id)

    def destroy(self):
        self._cleanup()

    def _cleanup(self):
        if self._main_loop is not None:
            self._main_loop.quit()
            self._main_loop = None
        self._bus = None

    def __chooser_response_cb(self, chooser_id, object_id):
        if chooser_id != self._chooser_id:
            return
        print('ObjectChooser.__chooser_response_cb: %r' % object_id)
        self._response_code = RESPONSE_ACCEPT
        self._object_id = object_id
        self._cleanup()

    def __chooser_cancelled_cb(self, chooser_id):
        if chooser_id != self._chooser_id:
            return
        print('ObjectChooser.__chooser_cancelled_cb: %r' % chooser_id)
        self._response_code = RESPONSE_CANCEL
        self._cleanup()

    def __name_owner_changed_cb(self, name, old, new):
        print('ObjectChooser.__name_owner_changed_cb')
        # Journal service disappeared from the bus
        self._response_code = RESPONSE_CANCEL
        self._cleanup()

def start_wine(*args):
    gobject.spawn_async(
        ['wine', 'explorer', '/desktop=%s' % os.environ['WINE_DESKTOP_NAME']] + [str(x) for x in args],
        flags=gobject.SPAWN_SEARCH_PATH)

def start_object(dsobject):
    import shutil
    import sys
    from sugar.activity import activity
    sys.path.insert(0, activity.get_bundle_path())
    import filenames
    file_path = dsobject.get_file_path()
    fd, filename = filenames.create_dsobject_file(dsobject.metadata)
    os.chmod(filename, int('0770', 8))
    shutil.copyfile(file_path, filename)
    os.close(fd)
    # FIXME: delete the file when this activity instance exits?
    start_wine('start', '/unix', filename)    


def start_chooser_object(chooser):
    try:
        response = chooser.run()
        if int(response) == RESPONSE_ACCEPT:
            dsobject = chooser.get_selected_object()
            try:
                start_object(dsobject)
            finally:
                dsobject.destroy()
    finally:
        chooser.destroy()

def on_chooser_realize(widget):
    # If ObjectChooser is a subclass of gtk.Dialog (old sugar-toolkit), we can't
    # use an XID for the transient parent. Instead, we set it through gdk when
    # the window is realized.
    try:
        import gtk
        widget.window.set_transient_for(gtk.gdk.window_foreign_new(int(os.environ['SUGARED_WINE_TOPLEVEL'])))
    except:
        traceback.print_exc()

try:
    chooser = ObjectChooser(parent=int(os.environ['SUGARED_WINE_TOPLEVEL']))
    start_chooser_object(chooser)
except:
    traceback.print_exc()
    import sugar.graphics.objectchooser
    chooser = sugar.graphics.objectchooser.ObjectChooser()
    try:
        chooser.connect('realize', on_chooser_realize)
    except:
        traceback.print_exc()
    start_chooser_object(chooser)

